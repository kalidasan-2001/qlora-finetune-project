name: CI

on:
  push:
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install ruff
        run: pip install ruff==0.5.5
      - name: Ruff check
        run: ruff check scripts

  data-validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Validate data/sft.jsonl
        run: |
          python - <<'PY'
          import json, sys, pathlib
          p = pathlib.Path("data/sft.jsonl")
          if not p.exists(): sys.exit("data/sft.jsonl missing")
          with p.open(encoding="utf-8") as f:
              for i,line in enumerate(f,1):
                  if not line.strip(): continue
                  obj=json.loads(line)
                  assert "messages" in obj and isinstance(obj["messages"], list), f"line {i}: messages missing"
                  for m in obj["messages"]:
                      assert set(m)=={"role","content"}, f"line {i}: bad message keys"
                      assert m["role"] in {"system","user","assistant"}, f"line {i}: bad role"
          print("data ok")
          PY

  build-and-dryrun:
    runs-on: ubuntu-latest
    needs: [lint, data-validate]
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install CPU torch and deps (skip torch/bitsandbytes pins)
        shell: bash
        run: |
          set -e
          pip install --index-url https://download.pytorch.org/whl/cpu torch==2.3.0
          awk 'tolower($0) !~ /^torch/ && tolower($0) !~ /^bitsandbytes/' requirements.txt > requirements-ci.txt
          pip install -r requirements-ci.txt

      - name: Prepare minimal dataset
        shell: bash
        run: |
          mkdir -p data
          if [ ! -s data/sft.jsonl ]; then
            echo '{"messages":[{"role":"system","content":"You are a helpful, concise assistant."},{"role":"user","content":"What is LoRA?"},{"role":"assistant","content":"LoRA fine-tunes models using small low-rank adapters while freezing base weights."}]}' > data/sft.jsonl
          fi
          wc -l data/sft.jsonl

      - name: Tiny dry-run training (CPU, tiny GPT-2)
        env:
          HF_HOME: ${{ github.workspace }}/.cache/huggingface
          TOKENIZERS_PARALLELISM: "false"
          BASE_MODEL: sshleifer/tiny-gpt2
          USE_4BIT: "0"
          MAX_SEQ_LEN: "64"
          GRAD_ACCUM: "1"
          MAX_STEPS: "1"
          OUT_DIR: runs/ci-test
        run: |
          python -u scripts/train.py

      - name: Verify adapter was created
        run: |
          test -d runs/ci-test/adapter || (echo "Adapter not found" && exit 1)
          ls -la runs/ci-test/adapter

      - name: Upload adapter artifact
        uses: actions/upload-artifact@v4
        with:
          name: ci-adapter
          path: runs/ci-test/adapter